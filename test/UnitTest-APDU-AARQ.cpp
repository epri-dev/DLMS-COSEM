// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#include "APDU/AARQ.h"
#if USE_CATCH2_VERSION == 2
#  define CATCH_CONFIG_MAIN
#  include <catch2/catch.hpp>
#elif USE_CATCH2_VERSION == 3
#  include <catch2/catch_test_macros.hpp>
#else
#  error "Catch2 version unknown"
#endif

using namespace EPRI;

static const std::vector<uint8_t> FINAL = 
{ 
    0x60, 0x36, 0xA1, 0x09, 0x06, 0x07, 0x60, 0x85, 
    0x74, 0x05, 0x08, 0x01, 0x01, 0x8A, 0x02, 0x07, 0x80, 0x8B, 0x07, 0x60, 0x85, 0x74, 0x05, 0x08, 
    0x02, 0x01, 0xAC, 0x0A, 0x80, 0x08, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xBE, 0x10, 
    0x04, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x06, 0x5F, 0x1F, 0x04, 0x00, 0x00, 0x7E, 0x1F, 0x00, 0x00, 
};
    
TEST_CASE("AARQ GeneralUsage") 
{
    AARQ a1;
    ASNObjectIdentifier ApplicationContext({ 2, 16, 756, 5, 8, 1, 1 });
    ASNObjectIdentifier MechanismName({ 2, 16, 756, 5, 8, 2, 1 }, ASN::IMPLICIT);

    REQUIRE(a1.application_context_name.Append(ApplicationContext));
    //
    // Just the application_context_name does not make a valid AARQ...
    //
    REQUIRE_FALSE(a1.IsValid());
       
    std::vector<uint8_t> A1CHECK_CONTEXT_NAME = 
    { 0xA1, 0x09, 0x06, 0x07, 0x60, 0x85, 
        0x74, 0x05, 0x08, 0x01, 0x01 };
    REQUIRE(static_cast<std::vector<uint8_t>>(a1.application_context_name) == A1CHECK_CONTEXT_NAME);
    
    ASNBitString        ACSERequirements(a1.sender_acse_requirements.GetCurrentSchemaTypeSize(), 1);
    REQUIRE(a1.sender_acse_requirements.Append(ACSERequirements));
    std::vector<uint8_t> A1CHECK_ACSE_REQ = { 0x8A, 0x02, 0x07, 0x80 };
    REQUIRE(static_cast<std::vector<uint8_t>>(a1.sender_acse_requirements) == A1CHECK_ACSE_REQ);
    
    REQUIRE(a1.mechanism_name.Append(MechanismName));
    std::vector<uint8_t> A1CHECK_MECHANISM_NAME = 
    { 0x8B, 0x07, 0x60, 0x85, 0x74, 0x05, 0x08,  0x02, 0x01 };
    REQUIRE(static_cast<std::vector<uint8_t>>(a1.mechanism_name) == A1CHECK_MECHANISM_NAME);
 
    REQUIRE(a1.calling_authentication_value.SelectChoice(APDUConstants::AuthenticationValueChoice::charstring));
    REQUIRE(a1.calling_authentication_value.Append(std::string("33333333")));
    std::vector<uint8_t> A1CHECK_AUTHENTICATION_VALUE = { 0xAC, 0x0A, 0x80, 0x08, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33 };
    REQUIRE(static_cast<std::vector<uint8_t>>(a1.calling_authentication_value) == A1CHECK_AUTHENTICATION_VALUE);
 
    REQUIRE(a1.user_information.Append(DLMSVector({ 0x01, 0x00, 0x00, 0x00, 0x06, 0x5F, 
                                                        0x1F, 0x04, 0x00, 0x00, 0x7E, 0x1F, 0x00, 0x00 })));
    std::vector<uint8_t> AARQ_VEC = a1.GetBytes();
    REQUIRE(AARQ_VEC == FINAL);
    
}

TEST_CASE("AARQ Parse") 
{
    AARQ        a1;
    DLMSVector  Data(FINAL);
    
    REQUIRE(a1.Parse(&Data, 1, 1));

    ASNObjectIdentifier ApplicationContext({ 2, 16, 756, 5, 8, 1, 1 });
    ASNObjectIdentifier MechanismName({ 2, 16, 756, 5, 8, 2, 1 }, ASN::IMPLICIT);
    ASNType             UserInformation(ASN::OCTET_STRING, 
                            DLMSVector({ 0x01, 0x00, 0x00, 0x00, 0x06, 0x5F, 
                                            0x1F, 0x04, 0x00, 0x00, 0x7E, 0x1F, 0x00, 0x00 }));
    ASNType             Current;
    REQUIRE(ASNType::GetNextResult::VALUE_RETRIEVED == a1.application_context_name.GetNextValue(&Current));
    REQUIRE(ApplicationContext == Current);
    
    ASNBitString        ACSERequirements(a1.sender_acse_requirements.GetCurrentSchemaTypeSize(), 1);
    ASNBitString        BitString(a1.sender_acse_requirements.GetCurrentSchemaTypeSize());
    REQUIRE(ASNType::GetNextResult::VALUE_RETRIEVED == a1.sender_acse_requirements.GetNextValue(&BitString));
    REQUIRE(ACSERequirements == BitString);

    REQUIRE(ASNType::GetNextResult::VALUE_RETRIEVED == a1.mechanism_name.GetNextValue(&Current));
    REQUIRE(MechanismName == Current);

    int8_t              Choice;
    DLMSValue           Value1;
    REQUIRE(ASNType::GetNextResult::VALUE_RETRIEVED == a1.calling_authentication_value.GetNextValue(&Value1));
    REQUIRE(a1.calling_authentication_value.GetChoice(&Choice));
    REQUIRE(APDUConstants::AuthenticationValueChoice::charstring == Choice);
    REQUIRE_FALSE(IsSequence(Value1));
    REQUIRE(DLMSValueGet<std::string>(Value1) == std::string("33333333"));
 
    REQUIRE(ASNType::GetNextResult::VALUE_RETRIEVED == a1.user_information.GetNextValue(&Current));
    REQUIRE(UserInformation == Current);
}
