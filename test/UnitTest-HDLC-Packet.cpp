// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#if USE_CATCH2_VERSION == 2
#  define CATCH_CONFIG_MAIN
#  include <catch2/catch.hpp>
#elif USE_CATCH2_VERSION == 3
#  include <catch2/catch_test_macros.hpp>
#else
#  error "Catch2 version unknown"
#endif

#include <cstdint>
#include <vector>
#include "hdlc/HDLCMAC.h"
#if 0
#include "../../lib/DLMS-COSEM/hdlc/HDLCHelpers.cpp"
#include "../../lib/DLMS-COSEM/hdlc/packet.cpp"
#endif
#include "DummySerial.h"

using namespace EPRI;

static const uint8_t PUT_TEST[] = { 0xE6, 0xE6, 0x00, 0x1D, 0x64, 0x00, 0x14, 0x00, 0x00 };
static const uint8_t PUT_TEST_PACKET[] = { 0x7e, 0xa0, 0x13, 0xce, 0xff, 0xcd, 0x13, 0x61, 0xd5, 0xe6, 0xe6, 0x00, 0x1d, 0x64, 0x00, 0x14, 0x00, 0x00, 0x2c, 0x66, 0x7e };
static const uint8_t PUT_SNRM[] = { 0x7E, 0xA0, 0x0A, 0x00, 0x02, 0x00, 0x23, 0x21, 0x93, 0x18, 0x71, 0x7E };

TEST_CASE("HDLCPacket MakePacket") 
{
    Packet   Sender;

    // EXAMPLE FROM GREEN BOOK
    HDLCErrorCode Error = Sender.MakePacket(Packet::NO_SEGMENT,
        HDLCAddress(uint8_t(0x67), uint8_t(0x7f)),
        HDLCAddress(0x66),
        HDLCControl(HDLCControl::UI),
        PUT_TEST,
        sizeof(PUT_TEST));
    REQUIRE(SUCCESS == Error);
    REQUIRE(0 ==
        std::memcmp(PUT_TEST_PACKET, (const uint8_t *) Sender, sizeof(PUT_TEST_PACKET)));
    REQUIRE(sizeof(PUT_TEST_PACKET) == Sender.GetPacketLength());
   
    // Now let's read the exact same thing to see if we can parse it!
    size_t InformationLength = 0;
    REQUIRE(Packet::NO_SEGMENT == Sender.GetSegmentation());
    REQUIRE(HDLCAddress(uint8_t(0x67), uint8_t(0x7f)) == Sender.GetDestinationAddress());
    REQUIRE(HDLCAddress(0x66) == Sender.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::UI) == Sender.GetControl());
    REQUIRE(sizeof(PUT_TEST) == Sender.GetInformationLength());   
    REQUIRE(0 == std::memcmp(Sender.GetInformation(InformationLength), PUT_TEST, sizeof(PUT_TEST)));
    REQUIRE(sizeof(PUT_TEST) == InformationLength);
    
    // Clear the packet
    Sender.Clear();
    
    // EXAMPLE FROM THE DLMS WEBSITE
    //Sent frame :
    //7EA00A00020023219318717E
    //Comments :
    //7E// HDLC frame opening flag
    //A00A //frame type and length
    //0002 // destination address (server) upper HDLC address 0x0001
    //0023 // destination address (server) lower HDLC address 0x0011
    //21// source address (client) 0x10
    //93// frame type SNRM (Set Normal Response Mode) 
    // information field with HDLC parameters not present, defaults are proposed
    //1871// Frame check sequence
    //7E// HDLC frame closing flag
    Error = Sender.MakePacket(Packet::NO_SEGMENT,
        HDLCAddress(uint16_t(0x0001), uint16_t(0x0011)),
        HDLCAddress(0x10),
        HDLCControl(HDLCControl::SNRM));
    REQUIRE(SUCCESS == Error);
    REQUIRE(0 ==
        std::memcmp(PUT_SNRM, (const uint8_t *) Sender, sizeof(PUT_SNRM)));
    REQUIRE(sizeof(PUT_SNRM) == Sender.GetPacketLength());
    
    // Now let's read the exact same thing to see if we can parse it!
    REQUIRE(Packet::NO_SEGMENT == Sender.GetSegmentation());
    REQUIRE(HDLCAddress(uint16_t(0x0001), uint16_t(0x0011)) == Sender.GetDestinationAddress());
    REQUIRE(HDLCAddress(0x10) == Sender.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::SNRM) == Sender.GetControl());
    REQUIRE(0 == Sender.GetInformationLength());   

}

TEST_CASE("HDLCPacket MakeByByte") 
{
    Packet Receiver;
    
    // Now let's read the exact same thing to see if we can parse it!
    size_t InformationLength = 0;
    size_t PacketIndex = sizeof(PUT_TEST_PACKET);
    const uint8_t * pBytes = PUT_TEST_PACKET;
    HDLCErrorCode Error = NEED_MORE;
    while (PacketIndex--)
    {
        Error = Receiver.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(SUCCESS == Error);
    REQUIRE(Packet::NO_SEGMENT == Receiver.GetSegmentation());
    REQUIRE(HDLCAddress(uint8_t(0x67), uint8_t(0x7f)) == Receiver.GetDestinationAddress());
    REQUIRE(HDLCAddress(0x66) == Receiver.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::UI) == Receiver.GetControl());
    REQUIRE(sizeof(PUT_TEST) == Receiver.GetInformationLength());   
    REQUIRE(0 == std::memcmp(Receiver.GetInformation(InformationLength), PUT_TEST, sizeof(PUT_TEST)));
    REQUIRE(sizeof(PUT_TEST) == InformationLength);
    
    
    // No information packet
    Receiver.Clear();
    InformationLength = 0;
    PacketIndex = sizeof(PUT_SNRM);
    pBytes = PUT_SNRM;
    Error = NEED_MORE;
    while (PacketIndex--)
    {
        Error = Receiver.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(Packet::NO_SEGMENT == Receiver.GetSegmentation());
    REQUIRE(HDLCAddress(uint16_t(0x0001), uint16_t(0x0011)) == Receiver.GetDestinationAddress());
    REQUIRE(HDLCAddress(0x10) == Receiver.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::SNRM) == Receiver.GetControl());
    REQUIRE(0 == Receiver.GetInformationLength());   

}

static const uint8_t IDENTIFY_TEST_PACKET[] = { 0x20 };
static const uint8_t IDENTIFY_TEST1_PACKET[] = { 'I' };
static const uint8_t IDENTIFY_RESPONSE_PACKET[] = { 0x00, 0x04, 0x01, 0x00 };

TEST_CASE("HDLCPacket Identify") 
{
    Packet Identify;
    
    size_t InformationLength = 0;
    size_t PacketIndex = sizeof(IDENTIFY_TEST_PACKET);
    const uint8_t * pBytes = IDENTIFY_TEST_PACKET;
    HDLCErrorCode Error = NEED_MORE;
    while (PacketIndex--)
    {
        Error = Identify.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(SUCCESS == Error);
    REQUIRE(Packet::NO_SEGMENT == Identify.GetSegmentation());
    REQUIRE(HDLCAddress() == Identify.GetDestinationAddress());
    REQUIRE(HDLCAddress() == Identify.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::IDENT) == Identify.GetControl());
    REQUIRE(0 == Identify.GetInformationLength());   
    REQUIRE(nullptr == Identify.GetInformation(InformationLength));   

    Identify.Clear();
    InformationLength = 0;
    PacketIndex = sizeof(IDENTIFY_TEST1_PACKET);
    pBytes = IDENTIFY_TEST1_PACKET;
    while (PacketIndex--)
    {
        Error = Identify.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(SUCCESS == Error);
    REQUIRE(Packet::NO_SEGMENT == Identify.GetSegmentation());
    REQUIRE(HDLCAddress() == Identify.GetDestinationAddress());
    REQUIRE(HDLCAddress() == Identify.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::IDENT) == Identify.GetControl());
    REQUIRE(0 == Identify.GetInformationLength());   
    REQUIRE(nullptr == Identify.GetInformation(InformationLength));  
    
    Identify.Clear();
    InformationLength = 0;
    PacketIndex = sizeof(IDENTIFY_RESPONSE_PACKET);
    pBytes = IDENTIFY_RESPONSE_PACKET;
    while (PacketIndex--)
    {
        Error = Identify.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(SUCCESS == Error);
    REQUIRE(Packet::NO_SEGMENT == Identify.GetSegmentation());
    REQUIRE(HDLCAddress() == Identify.GetDestinationAddress());
    REQUIRE(HDLCAddress() == Identify.GetSourceAddress());
    REQUIRE(HDLCControl(HDLCControl::IDENTR) == Identify.GetControl());
    REQUIRE(sizeof(IDENTIFY_RESPONSE_PACKET) == Identify.GetInformationLength()) ;   
    REQUIRE(0 == std::memcmp(Identify.GetInformation(InformationLength), IDENTIFY_RESPONSE_PACKET, 
        sizeof(IDENTIFY_RESPONSE_PACKET)));
      
}

static const uint8_t BAD_AARQ_TEST_PACKET[] = 
{ 
    0x7E, 0xA0, 0x3A, 0x03, 0x10, 0xDE, 0x91, 0xE6, 0xE6, 0x00, 0x61, 0x2D, 0xA1, 0x09, 0x06, 0x07, 
    0x60, 0x85, 0x74, 0x05, 0x08, 0x01, 0x01, 0xA2, 0x03, 0x02, 0x01, 0x00, 0xA3, 0x05, 0xA1, 0x03, 
    0x02, 0x01, 0x00, 0x88, 0x02, 0x07, 0x80, 0xBE, 0x10, 0x04, 0x0E, 0x08, 0x00, 0x06, 0x5F, 0x1F, 
    0x04, 0x00, 0x00, 0x38, 0x1F, 0x00, 0x9B, 0x00, 0x07, 0x84, 0x5C, 0x7E
};

TEST_CASE("HDLCPacket BiggerPacket") 
{
    Packet AARQ;
    
    size_t InformationLength = 0;
    size_t PacketIndex = sizeof(BAD_AARQ_TEST_PACKET);
    const uint8_t * pBytes = BAD_AARQ_TEST_PACKET;
    HDLCErrorCode Error = NEED_MORE;
    while (PacketIndex--)
    {
        Error = AARQ.MakeByByte(*pBytes++);
        if (Error != NEED_MORE)
        {
            break;
        }
    }
    REQUIRE(Error == HEADER_CRC_FAILURE);
    
}


